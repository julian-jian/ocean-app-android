package com.sky.lamp.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.sky.lamp.bean.LightItemMode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIGHT_ITEM_MODE".
*/
public class LightItemModeDao extends AbstractDao<LightItemMode, Long> {

    public static final String TABLENAME = "LIGHT_ITEM_MODE";

    /**
     * Properties of entity LightItemMode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, int.class, "index", false, "INDEX");
        public final static Property Light1Level = new Property(2, int.class, "light1Level", false, "LIGHT1_LEVEL");
        public final static Property Light2Level = new Property(3, int.class, "light2Level", false, "LIGHT2_LEVEL");
        public final static Property Light3Level = new Property(4, int.class, "light3Level", false, "LIGHT3_LEVEL");
        public final static Property Light4Level = new Property(5, int.class, "light4Level", false, "LIGHT4_LEVEL");
        public final static Property Light5Level = new Property(6, int.class, "light5Level", false, "LIGHT5_LEVEL");
        public final static Property Light6Level = new Property(7, int.class, "light6Level", false, "LIGHT6_LEVEL");
        public final static Property Light7Level = new Property(8, int.class, "light7Level", false, "LIGHT7_LEVEL");
        public final static Property ModeName = new Property(9, String.class, "modeName", false, "MODE_NAME");
        public final static Property StartTime = new Property(10, String.class, "startTime", false, "START_TIME");
        public final static Property StopTime = new Property(11, String.class, "stopTime", false, "STOP_TIME");
        public final static Property Parent_id = new Property(12, long.class, "parent_id", false, "PARENT_ID");
    }

    private Query<LightItemMode> commandLightMode_MParametersQuery;

    public LightItemModeDao(DaoConfig config) {
        super(config);
    }
    
    public LightItemModeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIGHT_ITEM_MODE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INDEX\" INTEGER NOT NULL ," + // 1: index
                "\"LIGHT1_LEVEL\" INTEGER NOT NULL ," + // 2: light1Level
                "\"LIGHT2_LEVEL\" INTEGER NOT NULL ," + // 3: light2Level
                "\"LIGHT3_LEVEL\" INTEGER NOT NULL ," + // 4: light3Level
                "\"LIGHT4_LEVEL\" INTEGER NOT NULL ," + // 5: light4Level
                "\"LIGHT5_LEVEL\" INTEGER NOT NULL ," + // 6: light5Level
                "\"LIGHT6_LEVEL\" INTEGER NOT NULL ," + // 7: light6Level
                "\"LIGHT7_LEVEL\" INTEGER NOT NULL ," + // 8: light7Level
                "\"MODE_NAME\" TEXT," + // 9: modeName
                "\"START_TIME\" TEXT," + // 10: startTime
                "\"STOP_TIME\" TEXT," + // 11: stopTime
                "\"PARENT_ID\" INTEGER NOT NULL );"); // 12: parent_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIGHT_ITEM_MODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LightItemMode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
        stmt.bindLong(3, entity.getLight1Level());
        stmt.bindLong(4, entity.getLight2Level());
        stmt.bindLong(5, entity.getLight3Level());
        stmt.bindLong(6, entity.getLight4Level());
        stmt.bindLong(7, entity.getLight5Level());
        stmt.bindLong(8, entity.getLight6Level());
        stmt.bindLong(9, entity.getLight7Level());
 
        String modeName = entity.getModeName();
        if (modeName != null) {
            stmt.bindString(10, modeName);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(11, startTime);
        }
 
        String stopTime = entity.getStopTime();
        if (stopTime != null) {
            stmt.bindString(12, stopTime);
        }
        stmt.bindLong(13, entity.getParent_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LightItemMode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
        stmt.bindLong(3, entity.getLight1Level());
        stmt.bindLong(4, entity.getLight2Level());
        stmt.bindLong(5, entity.getLight3Level());
        stmt.bindLong(6, entity.getLight4Level());
        stmt.bindLong(7, entity.getLight5Level());
        stmt.bindLong(8, entity.getLight6Level());
        stmt.bindLong(9, entity.getLight7Level());
 
        String modeName = entity.getModeName();
        if (modeName != null) {
            stmt.bindString(10, modeName);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(11, startTime);
        }
 
        String stopTime = entity.getStopTime();
        if (stopTime != null) {
            stmt.bindString(12, stopTime);
        }
        stmt.bindLong(13, entity.getParent_id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LightItemMode readEntity(Cursor cursor, int offset) {
        LightItemMode entity = new LightItemMode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // index
            cursor.getInt(offset + 2), // light1Level
            cursor.getInt(offset + 3), // light2Level
            cursor.getInt(offset + 4), // light3Level
            cursor.getInt(offset + 5), // light4Level
            cursor.getInt(offset + 6), // light5Level
            cursor.getInt(offset + 7), // light6Level
            cursor.getInt(offset + 8), // light7Level
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // modeName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // startTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // stopTime
            cursor.getLong(offset + 12) // parent_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LightItemMode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.getInt(offset + 1));
        entity.setLight1Level(cursor.getInt(offset + 2));
        entity.setLight2Level(cursor.getInt(offset + 3));
        entity.setLight3Level(cursor.getInt(offset + 4));
        entity.setLight4Level(cursor.getInt(offset + 5));
        entity.setLight5Level(cursor.getInt(offset + 6));
        entity.setLight6Level(cursor.getInt(offset + 7));
        entity.setLight7Level(cursor.getInt(offset + 8));
        entity.setModeName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStartTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStopTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setParent_id(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LightItemMode entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LightItemMode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LightItemMode entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mParameters" to-many relationship of CommandLightMode. */
    public List<LightItemMode> _queryCommandLightMode_MParameters(long parent_id) {
        synchronized (this) {
            if (commandLightMode_MParametersQuery == null) {
                QueryBuilder<LightItemMode> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Parent_id.eq(null));
                commandLightMode_MParametersQuery = queryBuilder.build();
            }
        }
        Query<LightItemMode> query = commandLightMode_MParametersQuery.forCurrentThread();
        query.setParameter(0, parent_id);
        return query.list();
    }

}
